{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nexport const todosSlice = createSlice({\n  name: 'todos',\n  initialState: {\n    items: [{\n      id: 1,\n      title: 'Buy groceries',\n      completed: true\n    }, {\n      id: 2,\n      title: 'Read a book',\n      completed: false\n    }],\n    activeFilter: 'all'\n  },\n  reducers: {\n    addTodo: {\n      reducer: (state, action) => {\n        state.items.push(action.payload);\n      },\n      prepare: ({\n        title\n      }) => {\n        return {\n          payload: {\n            id: nanoid(),\n            completed: false\n          }\n        };\n      }\n    },\n    toggle: (state, action) => {\n      const {\n        id\n      } = action.payload;\n      const item = state.items.find(item => item.id === id);\n      item.completed = !item.completed;\n    },\n    destroy: (state, action) => {\n      const id = action.payload;\n      const filtered = state.items.filter(item => item.id !== id);\n      state.items = filtered;\n    },\n    changeActiveFilter: (state, action) => {\n      state.activeFilter = action.payload;\n    },\n    clearCompleted: state => {\n      const filtered = state.items.filter(item => item.completed === false);\n      state.items = filtered;\n    }\n  }\n});\nexport const selectTodos = state => state.todos.items;\nexport const selectedFilteredTodos = state => {\n  if (state.todos.activeFilter === 'all') {\n    return state.todos.items;\n  }\n  return state.todos.items.filter(todo => state.todos.activeFilter === 'active' ? todo.completed === false : todo.completed === true);\n};\nexport const {\n  addTodo,\n  toggle,\n  destroy,\n  changeActiveFilter,\n  clearCompleted\n} = todosSlice.actions;\nexport default todosSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","todosSlice","name","initialState","items","id","title","completed","activeFilter","reducers","addTodo","reducer","state","action","push","payload","prepare","toggle","item","find","destroy","filtered","filter","changeActiveFilter","clearCompleted","selectTodos","todos","selectedFilteredTodos","todo","actions"],"sources":["C:/Users/Lenovo/Downloads/to-do-redux/src/redux/todos/todosSlice.js"],"sourcesContent":["import { createSlice, nanoid } from '@reduxjs/toolkit';\r\n\r\nexport const todosSlice = createSlice({\r\n  name: 'todos',\r\n  initialState: {\r\n    items: [\r\n      {\r\n        id: 1,\r\n        title: 'Buy groceries',\r\n        completed: true,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: 'Read a book',\r\n        completed: false,\r\n      },\r\n    ],\r\n    activeFilter: 'all',\r\n  },\r\n  reducers: {\r\n    addTodo: {\r\n      reducer: (state, action) => {\r\n        state.items.push(action.payload);\r\n      },\r\n      prepare: ({ title }) => {\r\n        return {\r\n          payload: { id: nanoid(), completed: false },\r\n        };\r\n      },\r\n    },\r\n    toggle: (state, action) => {\r\n      const { id } = action.payload;\r\n      const item = state.items.find((item) => item.id === id);\r\n      item.completed = !item.completed;\r\n    },\r\n    destroy: (state, action) => {\r\n      const id = action.payload;\r\n      const filtered = state.items.filter((item) => item.id !== id);\r\n      state.items = filtered;\r\n    },\r\n    changeActiveFilter: (state, action) => {\r\n      state.activeFilter = action.payload;\r\n    },\r\n    clearCompleted: (state) => {\r\n      const filtered = state.items.filter((item) => item.completed === false);\r\n      state.items = filtered;\r\n    },\r\n  },\r\n});\r\n\r\nexport const selectTodos = (state) => state.todos.items;\r\nexport const selectedFilteredTodos = (state) => {\r\n  if (state.todos.activeFilter === 'all') {\r\n    return state.todos.items;\r\n  }\r\n\r\n  return state.todos.items.filter((todo) =>\r\n    state.todos.activeFilter === 'active'\r\n      ? todo.completed === false\r\n      : todo.completed === true\r\n  );\r\n};\r\n\r\nexport const { addTodo, toggle, destroy, changeActiveFilter, clearCompleted } =\r\n  todosSlice.actions;\r\nexport default todosSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AAEtD,OAAO,MAAMC,UAAU,GAAGF,WAAW,CAAC;EACpCG,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,KAAK,EAAE,CACL;MACEC,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,eAAe;MACtBC,SAAS,EAAE;IACb,CAAC,EACD;MACEF,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,aAAa;MACpBC,SAAS,EAAE;IACb,CAAC,CACF;IACDC,YAAY,EAAE;EAChB,CAAC;EACDC,QAAQ,EAAE;IACRC,OAAO,EAAE;MACPC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;QAC1BD,KAAK,CAACR,KAAK,CAACU,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;MAClC,CAAC;MACDC,OAAO,EAAEA,CAAC;QAAEV;MAAM,CAAC,KAAK;QACtB,OAAO;UACLS,OAAO,EAAE;YAAEV,EAAE,EAAEL,MAAM,CAAC,CAAC;YAAEO,SAAS,EAAE;UAAM;QAC5C,CAAC;MACH;IACF,CAAC;IACDU,MAAM,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK;MACzB,MAAM;QAAER;MAAG,CAAC,GAAGQ,MAAM,CAACE,OAAO;MAC7B,MAAMG,IAAI,GAAGN,KAAK,CAACR,KAAK,CAACe,IAAI,CAAED,IAAI,IAAKA,IAAI,CAACb,EAAE,KAAKA,EAAE,CAAC;MACvDa,IAAI,CAACX,SAAS,GAAG,CAACW,IAAI,CAACX,SAAS;IAClC,CAAC;IACDa,OAAO,EAAEA,CAACR,KAAK,EAAEC,MAAM,KAAK;MAC1B,MAAMR,EAAE,GAAGQ,MAAM,CAACE,OAAO;MACzB,MAAMM,QAAQ,GAAGT,KAAK,CAACR,KAAK,CAACkB,MAAM,CAAEJ,IAAI,IAAKA,IAAI,CAACb,EAAE,KAAKA,EAAE,CAAC;MAC7DO,KAAK,CAACR,KAAK,GAAGiB,QAAQ;IACxB,CAAC;IACDE,kBAAkB,EAAEA,CAACX,KAAK,EAAEC,MAAM,KAAK;MACrCD,KAAK,CAACJ,YAAY,GAAGK,MAAM,CAACE,OAAO;IACrC,CAAC;IACDS,cAAc,EAAGZ,KAAK,IAAK;MACzB,MAAMS,QAAQ,GAAGT,KAAK,CAACR,KAAK,CAACkB,MAAM,CAAEJ,IAAI,IAAKA,IAAI,CAACX,SAAS,KAAK,KAAK,CAAC;MACvEK,KAAK,CAACR,KAAK,GAAGiB,QAAQ;IACxB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMI,WAAW,GAAIb,KAAK,IAAKA,KAAK,CAACc,KAAK,CAACtB,KAAK;AACvD,OAAO,MAAMuB,qBAAqB,GAAIf,KAAK,IAAK;EAC9C,IAAIA,KAAK,CAACc,KAAK,CAAClB,YAAY,KAAK,KAAK,EAAE;IACtC,OAAOI,KAAK,CAACc,KAAK,CAACtB,KAAK;EAC1B;EAEA,OAAOQ,KAAK,CAACc,KAAK,CAACtB,KAAK,CAACkB,MAAM,CAAEM,IAAI,IACnChB,KAAK,CAACc,KAAK,CAAClB,YAAY,KAAK,QAAQ,GACjCoB,IAAI,CAACrB,SAAS,KAAK,KAAK,GACxBqB,IAAI,CAACrB,SAAS,KAAK,IACzB,CAAC;AACH,CAAC;AAED,OAAO,MAAM;EAAEG,OAAO;EAAEO,MAAM;EAAEG,OAAO;EAAEG,kBAAkB;EAAEC;AAAe,CAAC,GAC3EvB,UAAU,CAAC4B,OAAO;AACpB,eAAe5B,UAAU,CAACU,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}